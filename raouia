{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SQL for Data Science: Peer Review Assignment\n",
    "\n",
    "## Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet\n",
    "\n",
    "This notebook is based on my original [workseet](./YelpDataCourseraPR1_HwanpyoKim.txt) for  peer review assignment with [Yelp Open Dataset](https://www.yelp.com/dataset) in Coursera class: [SQL for Data Science](https://www.coursera.org/learn/sql-for-data-science/home/welcome).\n",
    "\n",
    "**Yelp Dataset ER diagram**\n",
    "<img src=\"./YelpERDiagram.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1: Yelp Dataset Profiling and Understanding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1\\. Profile the data by finding the total number of records for each of the tables below:**\n",
    "\n",
    "\n",
    "* Attribute table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM attribute\n",
    "```\n",
    "* Business table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM business\n",
    "```\n",
    "* Category table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM category\n",
    "```\n",
    "* Checkin table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM checkin\n",
    "```\n",
    "* elite_years table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM elite_years\n",
    "```\n",
    "* friend table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM friend\n",
    "```\n",
    "* hours table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM hours\n",
    "```\n",
    "* photo table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM photo\n",
    "```\n",
    "* review table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM review\n",
    "```\n",
    "* tip table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM tip\n",
    "```\n",
    "* user table = 10000\n",
    "```SQL\n",
    "SELECT count(*) FROM user\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2\\. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.**\n",
    "\n",
    "Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.\t\n",
    "\n",
    "* Business = 10000 (id)\n",
    "```SQL\n",
    "SELECT count(distinct id) FROM business\n",
    "```\n",
    "* Hours = 1562 (business_id)\n",
    "```SQL\n",
    "SELECT count(distinct business_id) FROM hours\n",
    "```\n",
    "* Category = 2643 (business_id)\n",
    "```SQL\n",
    "SELECT count(distinct business_id) FROM category\n",
    "```\n",
    "* Attribute = 1115 (business_id)\n",
    "```SQL\n",
    "SELECT count(distinct business_id) FROM attribute\n",
    "```\n",
    "* Review = 10000 (id), 8090 (business_id), 9581 (user_id)\n",
    "```SQL\n",
    "SELECT count(distinct id), count(distinct business_id), count(distinct user_id) FROM review\n",
    "```\n",
    "* Checkin = 493 (business_id)\n",
    "```SQL\n",
    "SELECT count(distinct business_id) FROM checkin\n",
    "```\n",
    "* Photo = 10000 (id), 6493 (business_id)\n",
    "```SQL\n",
    "SELECT count(distinct id), count(distinct business_id) FROM photo\n",
    "```\n",
    "* Tip = 3979 (business_id), 537 (user_id)\n",
    "```SQL\n",
    "SELECT count(distinct business_id), count(distinct user_id) FROM tip\n",
    "```\n",
    "* User = 10000 (id)\n",
    "```SQL\n",
    "SELECT count(distinct id) FROM user\n",
    "```\n",
    "* Friend = 11 (user_id)\n",
    "```SQL\n",
    "SELECT count(distinct user_id) FROM friend\n",
    "```\n",
    "* Elite_years = 2780 (user_id)\n",
    "```SQL\n",
    "SELECT count(distinct user_id) FROM elite_years\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3\\. Are there any columns with null values in the Users table? Indicate \"yes,\" or \"no.\"**\n",
    "\n",
    "Answer: no\n",
    "\t\t\n",
    "SQL code used to arrive at answer:\n",
    "    \n",
    "```SQL\n",
    "SELECT count(*) - count(id),\n",
    "   count(*) - count(name),\n",
    "   count(*) - count(review_count),\n",
    "   count(*) - count(yelping_since),\n",
    "   count(*) - count(useful),\n",
    "   count(*) - count(cool),\n",
    "   count(*) - count(fans),\n",
    "   count(*) - count(average_stars),\n",
    "   count(*) - count(compliment_hot),\n",
    "   count(*) - count(compliment_more),\n",
    "   count(*) - count(compliment_profile),\n",
    "   count(*) - count(compliment_cute),\n",
    "   count(*) - count(compliment_list),\n",
    "   count(*) - count(compliment_note),\n",
    "   count(*) - count(compliment_plain),\n",
    "   count(*) - count(compliment_cool),\n",
    "   count(*) - count(compliment_funny),\n",
    "   count(*) - count(compliment_writer),\n",
    "   count(*) - count(compliment_photos)\n",
    "FROM user\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4\\. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:**\n",
    "\n",
    "* Table: Review, Column: Stars\n",
    "\n",
    "min: 1\t\tmax: 5\t\tavg: 3.7082\n",
    "\n",
    "```SQL\n",
    "SELECT min(stars), max(stars), avg(stars) FROM review\n",
    "```\n",
    "\n",
    "\n",
    "* Table: Business, Column: Stars\n",
    "\n",
    "min: 1\t\tmax: 5\t\tavg: 3.6549\n",
    "\n",
    "```SQL\n",
    "SELECT min(stars), max(stars), avg(stars) FROM business\n",
    "```\n",
    "\n",
    "* Table: Tip, Column: Likes\n",
    "\n",
    "min: 0\t\tmax: 2\t\tavg: 0.0144\n",
    "\n",
    "```SQL\n",
    "SELECT min(likes), max(likes), avg(likes) FROM tip\n",
    "```\n",
    "\n",
    "* Table: Checkin, Column: Count\n",
    "\n",
    "min: 1\t\tmax: 53\t\tavg: 1.9414\n",
    "\n",
    "```SQL\n",
    "SELECT min(count), max(count), avg(count) FROM checkin\n",
    "```\n",
    "\n",
    "* Table: User, Column: Review_count\n",
    "\n",
    "min: 0\t\tmax: 2000\tavg: 24.2995\n",
    "\n",
    "```SQL\n",
    "SELECT min(review_count), max(review_count), avg(review_count) FROM user\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5\\. List the cities with the most reviews in descending order:**\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT sum(review_count) AS total_reviews, city\n",
    "FROM business\n",
    "GROUP BY city\n",
    "ORDER BY total_reviews DESC\n",
    "```\n",
    "\n",
    "Copy and Paste the Result Below:\n",
    "\n",
    "```\n",
    "+---------------+-----------------+\n",
    "| total_reviews | city            |\n",
    "+---------------+-----------------+\n",
    "|         82854 | Las Vegas       |\n",
    "|         34503 | Phoenix         |\n",
    "|         24113 | Toronto         |\n",
    "|         20614 | Scottsdale      |\n",
    "|         12523 | Charlotte       |\n",
    "|         10871 | Henderson       |\n",
    "|         10504 | Tempe           |\n",
    "|          9798 | Pittsburgh      |\n",
    "|          9448 | Montréal        |\n",
    "|          8112 | Chandler        |\n",
    "|          6875 | Mesa            |\n",
    "|          6380 | Gilbert         |\n",
    "|          5593 | Cleveland       |\n",
    "|          5265 | Madison         |\n",
    "|          4406 | Glendale        |\n",
    "|          3814 | Mississauga     |\n",
    "|          2792 | Edinburgh       |\n",
    "|          2624 | Peoria          |\n",
    "|          2438 | North Las Vegas |\n",
    "|          2352 | Markham         |\n",
    "|          2029 | Champaign       |\n",
    "|          1849 | Stuttgart       |\n",
    "|          1520 | Surprise        |\n",
    "|          1465 | Lakewood        |\n",
    "|          1155 | Goodyear        |\n",
    "+---------------+-----------------+\n",
    "(Output limit exceeded, 25 of 362 total rows shown)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6\\. Find the distribution of star ratings to the business in the following cities:**\n",
    "\n",
    "* Avon\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT stars AS star_rating, count(stars) AS count\n",
    "FROM business\n",
    "WHERE city='Avon'\n",
    "GROUP BY stars\n",
    "```\n",
    "\n",
    "Copy and Paste the Resulting Table Below (2 columns – star rating and count):\n",
    "\n",
    "```\n",
    "+-------------+-------+\n",
    "| star_rating | count |\n",
    "+-------------+-------+\n",
    "|         1.5 |     1 |\n",
    "|         2.5 |     2 |\n",
    "|         3.5 |     3 |\n",
    "|         4.0 |     2 |\n",
    "|         4.5 |     1 |\n",
    "|         5.0 |     1 |\n",
    "+-------------+-------+\n",
    "```\n",
    "\n",
    "* Beachwood\n",
    "\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT stars AS star_rating, count(stars) AS count\n",
    "FROM business\n",
    "WHERE city='Beachwood'\n",
    "GROUP BY stars\n",
    "```\n",
    "\n",
    "Copy and Paste the Resulting Table Below (2 columns – star rating and count):\n",
    "\n",
    "```\n",
    "+-------------+-------+\n",
    "| star_rating | count |\n",
    "+-------------+-------+\n",
    "|         2.0 |     1 |\n",
    "|         2.5 |     1 |\n",
    "|         3.0 |     2 |\n",
    "|         3.5 |     2 |\n",
    "|         4.0 |     1 |\n",
    "|         4.5 |     2 |\n",
    "|         5.0 |     5 |\n",
    "+-------------+-------+\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**7\\. Find the top 3 users based on their total number of reviews:**\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT name, sum(review_count) AS total_count\n",
    "FROM user\n",
    "GROUP BY id\n",
    "ORDER BY total_count DESC\n",
    "LIMIT 3\n",
    "```\n",
    "\t\t\n",
    "Copy and Paste the Result Below:\n",
    "```\n",
    "+--------+-------------+\n",
    "| name   | total_count |\n",
    "+--------+-------------+\n",
    "| Gerald |        2000 |\n",
    "| Sara   |        1629 |\n",
    "| Yuri   |        1339 |\n",
    "+--------+-------------+\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**8\\. Does posing more reviews correlate with more fans?**\n",
    "\n",
    "Please explain your findings and interpretation of the results:\n",
    "\t\n",
    "Yes! it seems correlated. Users with more reviews tend to have more fans.\n",
    "\n",
    "SQL code: \n",
    "\n",
    "```SQL\n",
    "SELECT range AS fans_range, \n",
    "       COUNT(*) AS num_user, \n",
    "       AVG(review_count) AS avg_num_review,     \n",
    "       AVG(fans) AS avg_num_fans\n",
    "FROM (SELECT CASE WHEN fans BETWEEN 0 AND 9 THEN '0 - 9'\n",
    "                  WHEN fans BETWEEN 10 AND 99 THEN '10 - 99'\n",
    "                  ELSE '100-1000' END AS range,\n",
    "             review_count, \n",
    "             fans\n",
    "      FROM user) AS subtable\n",
    "GROUP BY subtable.range\n",
    "```\n",
    "\n",
    "Result: \n",
    "```\n",
    "+------------+----------+----------------+----------------+\n",
    "| fans_range | num_user | avg_num_review |   avg_num_fans |\n",
    "+------------+----------+----------------+----------------+\n",
    "| 0 - 9      |     9690 |  15.0085655315 | 0.447265221878 |\n",
    "| 10 - 99    |      294 |  283.326530612 |  25.5986394558 |\n",
    "| 100-1000   |       16 |          891.5 |         189.75 |\n",
    "+------------+----------+----------------+----------------+\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**9\\.  Are there more reviews with the word \"love\" or with the word \"hate\" in them?**\n",
    "\n",
    "Answer: \"love\"\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT reaction, count(*) count\n",
    "FROM (\n",
    "      SELECT CASE WHEN LOWER(text) LIKE '%love%' THEN 'love'\n",
    "                  WHEN LOWER(text) LIKE '%hate%' THEN 'hate' \n",
    "                  ELSE NULL END AS reaction\n",
    "      FROM review)\n",
    "GROUP BY reaction\n",
    "ORDER BY count DESC\n",
    "```\n",
    "\n",
    "Result: \n",
    "```\n",
    "+----------+-------+\n",
    "| reaction | count |\n",
    "+----------+-------+\n",
    "|     None |  8042 |\n",
    "|     love |  1780 |\n",
    "|     hate |   178 |\n",
    "+----------+-------+\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**10\\. Find the top 10 users with the most fans:**\n",
    "\n",
    "SQL code used to arrive at answer:\n",
    "```SQL\t\n",
    "SELECT name, fans\n",
    "FROM user\n",
    "ORDER BY fans DESC\n",
    "LIMIT 10\n",
    "```\n",
    "\t\n",
    "Copy and Paste the Result Below:\n",
    "```\n",
    "+-----------+------+\n",
    "| name      | fans |\n",
    "+-----------+------+\n",
    "| Amy       |  503 |\n",
    "| Mimi      |  497 |\n",
    "| Harald    |  311 |\n",
    "| Gerald    |  253 |\n",
    "| Christine |  173 |\n",
    "| Lisa      |  159 |\n",
    "| Cat       |  133 |\n",
    "| William   |  126 |\n",
    "| Fran      |  124 |\n",
    "| Lissa     |  120 |\n",
    "+-----------+------+\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**11\\. Is there a strong relationship (or correlation) between having a high number of fans and being listed as \"useful\" or \"funny?\" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?**\n",
    "\n",
    "Key:<br \\>\n",
    "0% - 25% - Low relationship <br \\>\n",
    "26% - 75% - Medium relationship <br \\>\n",
    "76% - 100% - Strong relationship\n",
    "\t\n",
    "SQL code used to arrive at answer:\n",
    "\n",
    "```SQL\n",
    "SELECT name, fans, (useful + funny)*1.0/(useful + funny + cool) AS Per_useful_funny, \n",
    "CASE WHEN (useful + funny)*1.0/(useful + funny + cool) > 0.0 AND \n",
    "          (useful + funny)*1.0/(useful + funny + cool) <=0.25 THEN 'Low'\n",
    "     WHEN (useful + funny)*1.0/(useful + funny + cool) > 0.25 AND \n",
    "          (useful + funny)*1.0/(useful + funny + cool) <=0.75 THEN 'Medium'\n",
    "     ELSE 'Strong' END AS Key\n",
    "FROM user\n",
    "ORDER BY fans DESC\n",
    "LIMIT 10\t\n",
    "```\n",
    "\t\n",
    "Copy and Paste the Result Below:\n",
    "```\n",
    "+-----------+------+------------------+--------+\n",
    "| name      | fans | Per_useful_funny | Key    |\n",
    "+-----------+------+------------------+--------+\n",
    "| Amy       |  503 |   0.677529011839 | Medium |\n",
    "| Mimi      |  497 |   0.712996389892 | Medium |\n",
    "| Harald    |  311 |   0.666268364881 | Medium |\n",
    "| Gerald    |  253 |   0.569428505853 | Medium |\n",
    "| Christine |  173 |   0.726536295171 | Medium |\n",
    "| Lisa      |  159 |   0.910447761194 | Strong |\n",
    "| Cat       |  133 |   0.617081850534 | Medium |\n",
    "| William   |  126 |   0.666476827792 | Medium |\n",
    "| Fran      |  124 |   0.651356292676 | Medium |\n",
    "| Lissa     |  120 |   0.638859556494 | Medium |\n",
    "+-----------+------+------------------+--------+\t\n",
    "```\t\n",
    "Please explain your findings and interpretation of the results:\n",
    "\t\n",
    "On average, there is medium relationship."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2: Inferences and Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1\\. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.**\n",
    "\n",
    "I choose \"Las Vegas\" and \"Shopping\" category."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**i\\. Do the two groups you chose to analyze have a different distribution of hours?**\n",
    "\n",
    "SQL code:\n",
    "```SQL\n",
    "SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'\n",
    "            WHEN stars >= 2.0 THEN '2-3 stars'\n",
    "            ELSE 'below 2' END AS 'STARS',               \n",
    "       COUNT(DISTINCT business.id) AS id_count,            \n",
    "       COUNT(hours) AS open_days_total,   -- number of openning days        \n",
    "       COUNT(hours)*1.0 / COUNT(DISTINCT business.id)  AS open_days_avg\n",
    "FROM ((business INNER JOIN hours ON business.id = hours.business_id)\n",
    "     INNER JOIN category ON business.id = category.business_id)\n",
    "WHERE city = 'Las Vegas' AND category.category ='Shopping'\n",
    "GROUP BY STARS\n",
    "```\n",
    "\n",
    "Result: \n",
    "```\n",
    "+-----------+----------+-----------------+---------------+\n",
    "| STARS     | id_count | open_days_total | open_days_avg |\n",
    "+-----------+----------+-----------------+---------------+\n",
    "| 2-3 stars |        2 |              13 |           6.5 |\n",
    "| 4-5 stars |        2 |              12 |           6.0 |\n",
    "+-----------+----------+-----------------+---------------+\n",
    "```\n",
    "\n",
    "There is no huge difference in openning days between the two groups."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ii\\. Do the two groups you chose to analyze have a different number of reviews?**\n",
    "\n",
    "SQL code:\n",
    "```SQL\n",
    "SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'\n",
    "            WHEN stars >= 2.0 THEN '2-3 stars'\n",
    "            ELSE 'below 2' END AS 'STARS',               \n",
    "       COUNT(DISTINCT business.id) AS id_count,            \n",
    "       SUM(review_count) AS review_count_total,\n",
    "       SUM(review_count)*1.0/COUNT(DISTINCT business.id)  AS review_count_avg\n",
    "FROM business INNER JOIN category ON business.id = category.business_id\n",
    "WHERE city = 'Las Vegas' AND category.category ='Shopping'\n",
    "GROUP BY STARS    \n",
    "```\n",
    "\n",
    "Result:\n",
    "```\n",
    "+-----------+----------+--------------------+------------------+\n",
    "| STARS     | id_count | review_count_total | review_count_avg |\n",
    "+-----------+----------+--------------------+------------------+\n",
    "| 2-3 stars |        2 |                 17 |              8.5 |\n",
    "| 4-5 stars |        2 |                 36 |             18.0 |\n",
    "+-----------+----------+--------------------+------------------+\n",
    "```\n",
    "\n",
    "There is different in the total number of review between the two groups, 17 & 36. The group with 4~5 stars have doubled number of reivew than the other group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**iii\\. Are you able to infer anything from the location data provided between these two groups? Explain.**\n",
    "\n",
    "SQL code used for analysis:\n",
    "\n",
    "```SQL\n",
    "SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'\n",
    "            WHEN stars >= 2.0 THEN '2-3 stars'\n",
    "            ELSE 'below 2' END AS 'STARS',\n",
    "       business.neighborhood,\n",
    "       business.address,\n",
    "       business.postal_code\n",
    "FROM business INNER JOIN category ON business.id = category.business_id\n",
    "WHERE city = 'Las Vegas' AND category.category ='Shopping'\n",
    "ORDER BY STARS\n",
    "```\n",
    "\n",
    "Result:\n",
    "```\n",
    "+-----------+--------------+-----------------------------+-------------+\n",
    "| STARS     | neighborhood | address                     | postal_code |\n",
    "+-----------+--------------+-----------------------------+-------------+\n",
    "| 2-3 stars | Southeast    | 3421 E Tropicana Ave, Ste I | 89121       |\n",
    "| 2-3 stars | Eastside     | 3808 E Tropicana Ave        | 89121       |\n",
    "| 4-5 stars |              | 1000 Scenic Loop Dr         | 89161       |\n",
    "| 4-5 stars |              | 3555 W Reno Ave, Ste F      | 89118       |\n",
    "+-----------+--------------+-----------------------------+-------------+\n",
    "```\n",
    "The shops with 2-3 stars are placed at Tropicana Ave., but the shops with higher stars are away from each other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2\\. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.**\n",
    "\n",
    "**i\\. Difference 1:** Number of business. The number of open-business is bigger than closed one.\n",
    "         \n",
    "         \n",
    "**ii\\. Difference 2:** Number of review & average of stars. Both of them in the open-business are bigger.        \n",
    "         \n",
    "         \n",
    "SQL code used for analysis:\n",
    "\n",
    "```SQL\n",
    "SELECT is_open, \n",
    "       count(distinct business.id) num_business, \n",
    "       count(distinct review.id) num_review,\n",
    "       avg(review.stars) avg_stars\n",
    "FROM business\n",
    "JOIN review ON business.id =  review.business_id\n",
    "GROUP BY is_open\n",
    "```\n",
    "\n",
    "Result:\n",
    "```\n",
    "+---------+--------------+------------+---------------+\n",
    "| is_open | num_business | num_review |     avg_stars |\n",
    "+---------+--------------+------------+---------------+\n",
    "|       0 |           61 |         71 | 3.64788732394 |\n",
    "|       1 |          446 |        565 |  3.7610619469 |\n",
    "+---------+--------------+------------+---------------+\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3\\. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.**\n",
    "\n",
    "**Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:**\n",
    "\t\n",
    "**i. Indicate the type of analysis you chose to do:**\n",
    "         \n",
    "What is the most successful category of business?\n",
    "         \n",
    "**ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:**\n",
    "\n",
    "Among the categories, I calcalate the average of stars and the proportion of opening on each category. To get statistical reasoning, I only consider the set of category with more than 10 of business. \n",
    "\n",
    "From the output, we can see that \"Local Service\", \"Health & Medica\", \"Home Services\", \"Shopping\", and \"Beauty & Spas\" are successful; they are getting better reviews and higher opening rate. However, \"Bars\", \"Nightlife\", and \"Restaurants\" have lower stars and close frequently.\n",
    "                           \n",
    "                  \n",
    "**iii. Output of your finished dataset:**\n",
    "```\n",
    "+------------------------+--------------+-----------+------------+\n",
    "| category               | num_business | avg_stars | avg_isopen |\n",
    "+------------------------+--------------+-----------+------------+\n",
    "| Local Services         |           12 |      4.21 |       0.83 |\n",
    "| Health & Medical       |           17 |      4.09 |       0.94 |\n",
    "| Home Services          |           16 |       4.0 |       0.94 |\n",
    "| Shopping               |           30 |      3.98 |       0.83 |\n",
    "| Beauty & Spas          |           13 |      3.88 |       0.92 |\n",
    "| American (Traditional) |           11 |      3.82 |       0.73 |\n",
    "| Food                   |           23 |      3.78 |       0.87 |\n",
    "| Bars                   |           17 |       3.5 |       0.65 |\n",
    "| Nightlife              |           20 |      3.48 |        0.6 |\n",
    "| Restaurants            |           71 |      3.46 |       0.75 |\n",
    "+------------------------+--------------+-----------+------------+     \n",
    "```      \n",
    "**iv. Provide the SQL code you used to create your final dataset:**\n",
    "```SQL\n",
    "SELECT category.category, \n",
    "       count(business.id) num_business, \n",
    "       round(avg(business.stars),2) avg_stars, \n",
    "       round(avg(business.is_open),2) avg_isopen\n",
    "FROM (business INNER JOIN category ON business.id = category.business_id)\n",
    "GROUP BY category.category\n",
    "HAVING num_business > 10\n",
    "ORDER BY avg_stars DESC, avg_isopen DESC\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
